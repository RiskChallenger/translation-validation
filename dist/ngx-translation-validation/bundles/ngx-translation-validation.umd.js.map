{"version":3,"file":"ngx-translation-validation.umd.js","sources":["../../../projects/ngx-translation-validation/src/lib/ngx-tv-container.directive.ts","../../../projects/ngx-translation-validation/src/lib/ngx-tv-form.directive.ts","../../../projects/ngx-translation-validation/src/lib/ngx-tv-scope.directive.ts","../../../projects/ngx-translation-validation/src/lib/ngx-tv.config.ts","../../../projects/ngx-translation-validation/src/lib/ngx-tv.directive.ts","../../../projects/ngx-translation-validation/src/lib/ngx-tv-container/ngx-tv-container.component.ts","../../../projects/ngx-translation-validation/src/lib/ngx-tv.module.ts","../../../projects/ngx-translation-validation/src/public-api.ts","../../../projects/ngx-translation-validation/src/ngx-translation-validation.ts"],"sourcesContent":["import { Directive, ViewContainerRef } from '@angular/core';\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[ngxTvContainer]',\n})\nexport class NgxTvContainerDirective {\n  constructor(public vcr: ViewContainerRef) {}\n}\n","import { Directive, ElementRef, EventEmitter, Self } from '@angular/core';\nimport { ControlContainer, FormGroup, FormGroupDirective, NgControl, NgForm, NgModelGroup } from '@angular/forms';\nimport { EMPTY, fromEvent, Observable } from 'rxjs';\nimport { shareReplay, tap } from 'rxjs/operators';\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[formGroup]',\n})\nexport class NgxTvFormDirective {\n  submit$ = this.hostFormGroup.ngSubmit;\n\n  constructor(private host: ElementRef<HTMLFormElement>, private hostFormGroup: FormGroupDirective) {}\n\n  get onBlur(): boolean {\n    return this.hostFormGroup.form.updateOn === 'blur';\n  }\n  get onSubmit(): boolean {\n    return this.hostFormGroup.form.updateOn === 'submit';\n  }\n  get element(): HTMLElement {\n    return this.host.nativeElement;\n  }\n}\n","import { Directive, Input } from '@angular/core';\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[ngxTvScope]',\n})\nexport class NgxTvScopeDirective {\n  // tslint:disable-next-line:variable-name\n  private _scope?: string;\n\n  @Input()\n  set ngxTvScope(scope: string) {\n    this._scope = scope;\n  }\n\n  get scope(): string | undefined {\n    return this._scope;\n  }\n}\n","import { InjectionToken, Type } from '@angular/core';\nimport { NgxTvContainerComponent } from './ngx-tv-container/ngx-tv-container.component';\n\nexport interface NgxTvConfig {\n  scope: string;\n  invalidClass?: string;\n  submittedClass?: string;\n  errorsComponent: Type<NgxTvContainerComponent>;\n}\n\nexport const NGX_TV_CONFIG = new InjectionToken('NGX_TV_CONFIG');\n","import {\n  ComponentFactoryResolver,\n  ComponentRef,\n  Directive,\n  ElementRef,\n  Host,\n  Inject,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { EMPTY, fromEvent, merge, Observable, Subscription } from 'rxjs';\nimport { shareReplay, tap } from 'rxjs/operators';\nimport { NgxTvContainerDirective } from './ngx-tv-container.directive';\nimport { NgxTvContainerComponent } from './ngx-tv-container/ngx-tv-container.component';\nimport { NgxTvFormDirective } from './ngx-tv-form.directive';\nimport { NgxTvScopeDirective } from './ngx-tv-scope.directive';\nimport { NGX_TV_CONFIG, NgxTvConfig } from './ngx-tv.config';\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[formControl], [formControlName]',\n})\nexport class NgxTvDirective implements OnInit, OnDestroy {\n  ref?: ComponentRef<NgxTvContainerComponent>;\n  submit$!: Observable<Event>;\n  container!: ViewContainerRef;\n  blur$!: Observable<Event>;\n  context: string | undefined;\n\n  statusChangesObservable!: Subscription;\n\n  constructor(\n    private host: ElementRef<HTMLFormElement>,\n    private vcr: ViewContainerRef,\n    private resolver: ComponentFactoryResolver,\n    @Self() private controlDir: NgControl,\n    @Inject(NGX_TV_CONFIG) private config: NgxTvConfig,\n    @Optional() private controlErrorContainer?: NgxTvContainerDirective,\n    @Optional() private controlErrorContext?: NgxTvScopeDirective,\n    @Optional() @Host() private form?: NgxTvFormDirective\n  ) {}\n\n  get element(): HTMLFormElement {\n    return this.host.nativeElement;\n  }\n\n  ngOnInit(): void {\n    this.submit$ =\n      this.form?.submit$.pipe(\n        tap(() => {\n          this.addSubmittedClass();\n        })\n      ) ?? EMPTY;\n    this.blur$ = !this.form?.onSubmit ? fromEvent(this.element, 'blur').pipe(shareReplay(1)) : EMPTY;\n    this.container = this.controlErrorContainer?.vcr ?? this.vcr;\n    this.context = this.controlErrorContext?.scope ?? 'general';\n\n    this.statusChangesObservable = merge(this.submit$, this.blur$, this.controlDir.statusChanges || EMPTY).subscribe(\n      () => {\n        const controlErrors = this.controlDir.errors;\n        if (controlErrors) {\n          const firstKey = Object.keys(controlErrors)[0];\n          this.setError(`${this.config.scope}.${this.context}.${this.controlDir.name}.${firstKey}`);\n        } else if (this.ref) {\n          this.setError(null);\n        }\n      }\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.statusChangesObservable.unsubscribe();\n  }\n\n  addSubmittedClass(): void {\n    if (this.config.submittedClass) {\n      this.form?.element.classList.add(this.config.submittedClass);\n    }\n  }\n\n  addInvalidClass(): void {\n    if (this.config.invalidClass) {\n      this.host.nativeElement.classList.add(this.config.invalidClass);\n    }\n  }\n\n  removeInvalidClass(): void {\n    if (this.config.invalidClass) {\n      this.host.nativeElement.classList.remove(this.config.invalidClass);\n    }\n  }\n\n  private setError(errorText: string | null): void {\n    if (!this.ref && errorText) {\n      const factory = this.resolver.resolveComponentFactory(this.config.errorsComponent);\n      this.ref = this.container.createComponent(factory);\n      this.addInvalidClass();\n    }\n    if (this.ref) {\n      this.ref.instance.text = errorText;\n    }\n\n    if (this.ref && errorText === null) {\n      this.ref.destroy();\n      this.removeInvalidClass();\n      this.ref = undefined;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input } from '@angular/core';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ngx-tv-container',\n  templateUrl: './ngx-tv-container.component.html',\n  styleUrls: ['./ngx-tv-container.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NgxTvContainerComponent {\n  componentText?: string;\n  componentHide = true;\n\n  @Input() set text(value: string | null) {\n    if (value !== this.componentText) {\n      this.componentHide = !value;\n      this.componentText = value || '';\n      this.cdr.detectChanges();\n    }\n  }\n\n  constructor(private cdr: ChangeDetectorRef) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { TRANSLOCO_SCOPE, TranslocoModule } from '@ngneat/transloco';\nimport { NgxTvContainerDirective } from './ngx-tv-container.directive';\nimport { NgxTvContainerComponent } from './ngx-tv-container/ngx-tv-container.component';\nimport { NgxTvFormDirective } from './ngx-tv-form.directive';\nimport { NgxTvScopeDirective } from './ngx-tv-scope.directive';\nimport { NGX_TV_CONFIG, NgxTvConfig } from './ngx-tv.config';\nimport { NgxTvDirective } from './ngx-tv.directive';\n\nexport function getConfig(config?: Partial<NgxTvConfig>): NgxTvConfig {\n  return {\n    scope: 'validation',\n    submittedClass: 'ng-submitted',\n    errorsComponent: NgxTvContainerComponent,\n    invalidClass: undefined,\n    ...config,\n  };\n}\n\n@NgModule({\n  declarations: [\n    NgxTvDirective,\n    NgxTvFormDirective,\n    NgxTvContainerComponent,\n    NgxTvContainerDirective,\n    NgxTvScopeDirective,\n  ],\n  imports: [CommonModule, TranslocoModule],\n  exports: [NgxTvDirective, NgxTvFormDirective, NgxTvContainerComponent, NgxTvContainerDirective, NgxTvScopeDirective],\n})\nexport class NgxTvModule {\n  static forRoot(config?: NgxTvConfig): ModuleWithProviders<NgxTvModule> {\n    return {\n      ngModule: NgxTvModule,\n      providers: [\n        {\n          provide: NGX_TV_CONFIG,\n          useValue: getConfig(config),\n        },\n        { provide: TRANSLOCO_SCOPE, useValue: getConfig(config).scope },\n      ],\n    };\n  }\n\n  static forChild(): ModuleWithProviders<NgxTvModule> {\n    return {\n      ngModule: NgxTvModule,\n    };\n  }\n}\n","/*\n * Public API Surface of ngx-translation-validation\n */\n\nexport * from './lib/ngx-tv.directive';\nexport * from './lib/ngx-tv-scope.directive';\nexport * from './lib/ngx-tv-container.directive';\nexport * from './lib/ngx-tv-form.directive';\nexport * from './lib/ngx-tv.config';\nexport * from './lib/ngx-tv-container/ngx-tv-container.component';\nexport * from './lib/ngx-tv.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["Directive","ViewContainerRef","ElementRef","FormGroupDirective","Input","InjectionToken","tap","EMPTY","fromEvent","shareReplay","merge","ComponentFactoryResolver","NgControl","Self","Inject","Optional","Host","Component","ChangeDetectionStrategy","ChangeDetectorRef","TRANSLOCO_SCOPE","NgModule","CommonModule","TranslocoModule"],"mappings":"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"}