{"version":3,"sources":["../../../projects/ngx-translation-validation/src/lib/ngx-tv-container.directive.ts","../../../projects/ngx-translation-validation/src/lib/ngx-tv-form.directive.ts","../../../projects/ngx-translation-validation/src/lib/ngx-tv-scope.directive.ts","../../../projects/ngx-translation-validation/src/lib/ngx-tv.config.ts","../../../projects/ngx-translation-validation/src/lib/ngx-tv.directive.ts","../../../projects/ngx-translation-validation/src/lib/ngx-tv-container/ngx-tv-container.component.ts","../../../projects/ngx-translation-validation/src/lib/ngx-tv.module.ts"],"names":["vcr","this","Directive","args","selector","ViewContainerRef","NgxTvFormDirective","host","hostFormGroup","submit$","ngSubmit","Object","defineProperty","prototype","form","updateOn","nativeElement","ElementRef","FormGroupDirective","NgxTvScopeDirective","scope","_scope","Input","NGX_TV_CONFIG","InjectionToken","NgxTvDirective","resolver","controlDir","config","controlErrorContainer","controlErrorContext","ngOnInit","_this","_b","_a","pipe","tap","addSubmittedClass","EMPTY","blur$","_c","onSubmit","fromEvent","element","shareReplay","container","_e","_d","context","_g","_f","statusChangesObservable","merge","statusChanges","subscribe","controlErrors","errors","firstKey","keys","setError","name","ref","ngOnDestroy","unsubscribe","submittedClass","classList","add","addInvalidClass","invalidClass","removeInvalidClass","remove","errorText","factory","resolveComponentFactory","errorsComponent","createComponent","instance","text","destroy","undefined","ComponentFactoryResolver","NgControl","decorators","type","Self","Inject","NgxTvContainerDirective","Optional","Host","NgxTvContainerComponent","cdr","componentHide","value","componentText","detectChanges","getConfig","assign","Component","template","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","NgxTvModule","forRoot","ngModule","providers","provide","useValue","TRANSLOCO_SCOPE","forChild","NgModule","declarations","imports","CommonModule","TranslocoModule","exports"],"mappings":"6mBAOE,SAAmBA,GAAAC,KAAAD,IAAAA,uBALpBE,EAAAA,UAASC,KAAA,CAAC,CAETC,SAAU,gEAJQC,EAAAA,qCCYlB,SAAAC,EAAoBC,EAA2CC,GAA3CP,KAAAM,KAAAA,EAA2CN,KAAAO,cAAAA,EAF/DP,KAAAQ,QAAUR,KAAKO,cAAcE,gBAI7BC,OAAAC,eAAIN,EAAAO,UAAA,SAAM,KAAV,WACE,MAA4C,SAArCZ,KAAKO,cAAcM,KAAKC,0CAEjCJ,OAAAC,eAAIN,EAAAO,UAAA,WAAQ,KAAZ,WACE,MAA4C,WAArCZ,KAAKO,cAAcM,KAAKC,0CAEjCJ,OAAAC,eAAIN,EAAAO,UAAA,UAAO,KAAX,WACE,OAAOZ,KAAKM,KAAKS,wEAhBpBd,EAAAA,UAASC,KAAA,CAAC,CAETC,SAAU,2DAPQa,EAAAA,kBACkBC,EAAAA,uCCKtC,SAAAC,YAIER,OAAAC,eACIO,EAAAN,UAAA,aAAU,KADd,SACeO,GACbnB,KAAKoB,OAASD,mCAGhBT,OAAAC,eAAIO,EAAAN,UAAA,QAAK,KAAT,WACE,OAAOZ,KAAKoB,iEAdfnB,EAAAA,UAASC,KAAA,CAAC,CAETC,SAAU,uDAMTkB,EAAAA,aCAUC,EAAgB,IAAIC,EAAAA,eAAe,8BCyB9C,SAAAC,EACUlB,EACAP,EACA0B,EACQC,EACeC,EACXC,EACAC,EACQhB,GAPpBb,KAAAM,KAAAA,EACAN,KAAAD,IAAAA,EACAC,KAAAyB,SAAAA,EACQzB,KAAA0B,WAAAA,EACe1B,KAAA2B,OAAAA,EACX3B,KAAA4B,sBAAAA,EACA5B,KAAA6B,oBAAAA,EACQ7B,KAAAa,KAAAA,SAG9BH,OAAAC,eAAIa,EAAAZ,UAAA,UAAO,KAAX,WACE,OAAOZ,KAAKM,KAAKS,+CAGnBS,EAAAZ,UAAAkB,SAAA,WAAA,kBAAAC,EAAA/B,KACEA,KAAKQ,QAIC,QAJMwB,EACD,QADCC,EACVjC,KAAKa,YAAI,IAAAoB,OAAA,EAAAA,EAAEzB,QAAQ0B,KACjBC,EAAAA,KAAI,WACFJ,EAAKK,+BACL,IAAAJ,EAAAA,EACCK,EAAAA,MACPrC,KAAKsC,OAAkB,QAAVC,EAACvC,KAAKa,YAAI,IAAA0B,OAAA,EAAAA,EAAEC,UAAkEH,EAAAA,MAAvDI,EAAAA,UAAUzC,KAAK0C,QAAS,QAAQR,KAAKS,EAAAA,YAAY,IACrF3C,KAAK4C,UAA2C,QAAlCC,EAA6B,QAA7BC,EAAG9C,KAAK4B,6BAAqB,IAAAkB,OAAA,EAAAA,EAAE/C,WAAG,IAAA8C,EAAAA,EAAI7C,KAAKD,IACzDC,KAAK+C,QAAyC,QAAlCC,EAA2B,QAA3BC,EAAGjD,KAAK6B,2BAAmB,IAAAoB,OAAA,EAAAA,EAAE9B,aAAK,IAAA6B,EAAAA,EAAI,UAElDhD,KAAKkD,wBAA0BC,EAAAA,MAAMnD,KAAKQ,QAASR,KAAKsC,MAAOtC,KAAK0B,WAAW0B,eAAiBf,EAAAA,OAAOgB,WACrG,WACE,IAAMC,EAAgBvB,EAAKL,WAAW6B,OACtC,GAAID,EAAe,CACjB,IAAME,EAAW9C,OAAO+C,KAAKH,GAAe,GAC5CvB,EAAK2B,SAAY3B,EAAKJ,OAAOR,MAAK,IAAIY,EAAKgB,QAAO,IAAIhB,EAAKL,WAAWiC,KAAI,IAAIH,QACrEzB,EAAK6B,KACd7B,EAAK2B,SAAS,UAMtBlC,EAAAZ,UAAAiD,YAAA,WACE7D,KAAKkD,wBAAwBY,eAG/BtC,EAAAZ,UAAAwB,kBAAA,iBACMpC,KAAK2B,OAAOoC,iBACL,QAAT9B,EAAAjC,KAAKa,YAAI,IAAAoB,GAAAA,EAAES,QAAQsB,UAAUC,IAAIjE,KAAK2B,OAAOoC,kBAIjDvC,EAAAZ,UAAAsD,gBAAA,WACMlE,KAAK2B,OAAOwC,cACdnE,KAAKM,KAAKS,cAAciD,UAAUC,IAAIjE,KAAK2B,OAAOwC,eAItD3C,EAAAZ,UAAAwD,mBAAA,WACMpE,KAAK2B,OAAOwC,cACdnE,KAAKM,KAAKS,cAAciD,UAAUK,OAAOrE,KAAK2B,OAAOwC,eAIjD3C,EAAAZ,UAAA8C,SAAA,SAASY,GACf,IAAKtE,KAAK4D,KAAOU,EAAW,CAC1B,IAAMC,EAAUvE,KAAKyB,SAAS+C,wBAAwBxE,KAAK2B,OAAO8C,iBAClEzE,KAAK4D,IAAM5D,KAAK4C,UAAU8B,gBAAgBH,GAC1CvE,KAAKkE,kBAEHlE,KAAK4D,MACP5D,KAAK4D,IAAIe,SAASC,KAAON,GAGvBtE,KAAK4D,KAAqB,OAAdU,IACdtE,KAAK4D,IAAIiB,UACT7E,KAAKoE,qBACLpE,KAAK4D,SAAMkB,6BAvFhB7E,EAAAA,UAASC,KAAA,CAAC,CAETC,SAAU,gFApBVa,EAAAA,kBAOAZ,EAAAA,wBAVA2E,EAAAA,gCAYOC,EAAAA,UAASC,WAAA,CAAA,CAAAC,KA0BbC,EAAAA,uCACAC,EAAAA,OAAMlF,KAAA,CAACoB,YAxBH+D,EAAuBJ,WAAA,CAAA,CAAAC,KAyB3BI,EAAAA,kBAtBIpE,EAAmB+D,WAAA,CAAA,CAAAC,KAuBvBI,EAAAA,kBAxBIjF,EAAkB4E,WAAA,CAAA,CAAAC,KAyBtBI,EAAAA,UAAQ,CAAAJ,KAAIK,EAAAA,2BCtBf,SAAAC,EAAoBC,GAAAzF,KAAAyF,IAAAA,EAVpBzF,KAAA0F,eAAgB,SAEhBhF,OAAAC,eAAa6E,EAAA5E,UAAA,OAAI,KAAjB,SAAkB+E,GACZA,IAAU3F,KAAK4F,gBACjB5F,KAAK0F,eAAiBC,EACtB3F,KAAK4F,cAAgBD,GAAS,GAC9B3F,KAAKyF,IAAII,gECPCC,EAAUnE,GACxB,OAAAjB,OAAAqF,OAAA,CACE5E,MAAO,aACP4C,eAAgB,eAChBU,gBAAiBe,EACjBrB,kBAAcW,GACXnD,uBDdNqE,EAAAA,UAAS9F,KAAA,CAAC,CAETC,SAAU,mBACV8F,SAAA,oJAEAC,gBAAiBC,EAAAA,wBAAwBC,+IAPTC,EAAAA,mDAa/BhF,EAAAA,0BCkBH,SAAAiF,YACSA,EAAAC,QAAP,SAAe5E,GACb,MAAO,CACL6E,SAAUF,EACVG,UAAW,CACT,CACEC,QAASpF,EACTqF,SAAUb,EAAUnE,IAEtB,CAAE+E,QAASE,EAAAA,gBAAiBD,SAAUb,EAAUnE,GAAQR,UAKvDmF,EAAAO,SAAP,WACE,MAAO,CACLL,SAAUF,6BA3BfQ,EAAAA,SAAQ5G,KAAA,CAAC,CACR6G,aAAc,CACZvF,EACAnB,EACAmF,EACAH,EACAnE,GAEF8F,QAAS,CAACC,EAAAA,aAAcC,EAAAA,iBACxBC,QAAS,CAAC3F,EAAgBnB,EAAoBmF,EAAyBH,EAAyBnE","sourcesContent":["import { Directive, ViewContainerRef } from '@angular/core';\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[ngxTvContainer]',\n})\nexport class NgxTvContainerDirective {\n  constructor(public vcr: ViewContainerRef) {}\n}\n","import { Directive, ElementRef, EventEmitter, Self } from '@angular/core';\nimport { ControlContainer, FormGroup, FormGroupDirective, NgControl, NgForm, NgModelGroup } from '@angular/forms';\nimport { EMPTY, fromEvent, Observable } from 'rxjs';\nimport { shareReplay, tap } from 'rxjs/operators';\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[formGroup]',\n})\nexport class NgxTvFormDirective {\n  submit$ = this.hostFormGroup.ngSubmit;\n\n  constructor(private host: ElementRef<HTMLFormElement>, private hostFormGroup: FormGroupDirective) {}\n\n  get onBlur(): boolean {\n    return this.hostFormGroup.form.updateOn === 'blur';\n  }\n  get onSubmit(): boolean {\n    return this.hostFormGroup.form.updateOn === 'submit';\n  }\n  get element(): HTMLElement {\n    return this.host.nativeElement;\n  }\n}\n","import { Directive, Input } from '@angular/core';\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[ngxTvScope]',\n})\nexport class NgxTvScopeDirective {\n  // tslint:disable-next-line:variable-name\n  private _scope?: string;\n\n  @Input()\n  set ngxTvScope(scope: string) {\n    this._scope = scope;\n  }\n\n  get scope(): string | undefined {\n    return this._scope;\n  }\n}\n","import { InjectionToken, Type } from '@angular/core';\nimport { NgxTvContainerComponent } from './ngx-tv-container/ngx-tv-container.component';\n\nexport interface NgxTvConfig {\n  scope: string;\n  invalidClass?: string;\n  submittedClass?: string;\n  errorsComponent: Type<NgxTvContainerComponent>;\n}\n\nexport const NGX_TV_CONFIG = new InjectionToken('NGX_TV_CONFIG');\n","import {\n  ComponentFactoryResolver,\n  ComponentRef,\n  Directive,\n  ElementRef,\n  Host,\n  Inject,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { EMPTY, fromEvent, merge, Observable, Subscription } from 'rxjs';\nimport { shareReplay, tap } from 'rxjs/operators';\nimport { NgxTvContainerDirective } from './ngx-tv-container.directive';\nimport { NgxTvContainerComponent } from './ngx-tv-container/ngx-tv-container.component';\nimport { NgxTvFormDirective } from './ngx-tv-form.directive';\nimport { NgxTvScopeDirective } from './ngx-tv-scope.directive';\nimport { NGX_TV_CONFIG, NgxTvConfig } from './ngx-tv.config';\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[formControl], [formControlName]',\n})\nexport class NgxTvDirective implements OnInit, OnDestroy {\n  ref?: ComponentRef<NgxTvContainerComponent>;\n  submit$!: Observable<Event>;\n  container!: ViewContainerRef;\n  blur$!: Observable<Event>;\n  context: string | undefined;\n\n  statusChangesObservable!: Subscription;\n\n  constructor(\n    private host: ElementRef<HTMLFormElement>,\n    private vcr: ViewContainerRef,\n    private resolver: ComponentFactoryResolver,\n    @Self() private controlDir: NgControl,\n    @Inject(NGX_TV_CONFIG) private config: NgxTvConfig,\n    @Optional() private controlErrorContainer?: NgxTvContainerDirective,\n    @Optional() private controlErrorContext?: NgxTvScopeDirective,\n    @Optional() @Host() private form?: NgxTvFormDirective\n  ) {}\n\n  get element(): HTMLFormElement {\n    return this.host.nativeElement;\n  }\n\n  ngOnInit(): void {\n    this.submit$ =\n      this.form?.submit$.pipe(\n        tap(() => {\n          this.addSubmittedClass();\n        })\n      ) ?? EMPTY;\n    this.blur$ = !this.form?.onSubmit ? fromEvent(this.element, 'blur').pipe(shareReplay(1)) : EMPTY;\n    this.container = this.controlErrorContainer?.vcr ?? this.vcr;\n    this.context = this.controlErrorContext?.scope ?? 'general';\n\n    this.statusChangesObservable = merge(this.submit$, this.blur$, this.controlDir.statusChanges || EMPTY).subscribe(\n      () => {\n        const controlErrors = this.controlDir.errors;\n        if (controlErrors) {\n          const firstKey = Object.keys(controlErrors)[0];\n          this.setError(`${this.config.scope}.${this.context}.${this.controlDir.name}.${firstKey}`);\n        } else if (this.ref) {\n          this.setError(null);\n        }\n      }\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.statusChangesObservable.unsubscribe();\n  }\n\n  addSubmittedClass(): void {\n    if (this.config.submittedClass) {\n      this.form?.element.classList.add(this.config.submittedClass);\n    }\n  }\n\n  addInvalidClass(): void {\n    if (this.config.invalidClass) {\n      this.host.nativeElement.classList.add(this.config.invalidClass);\n    }\n  }\n\n  removeInvalidClass(): void {\n    if (this.config.invalidClass) {\n      this.host.nativeElement.classList.remove(this.config.invalidClass);\n    }\n  }\n\n  private setError(errorText: string | null): void {\n    if (!this.ref && errorText) {\n      const factory = this.resolver.resolveComponentFactory(this.config.errorsComponent);\n      this.ref = this.container.createComponent(factory);\n      this.addInvalidClass();\n    }\n    if (this.ref) {\n      this.ref.instance.text = errorText;\n    }\n\n    if (this.ref && errorText === null) {\n      this.ref.destroy();\n      this.removeInvalidClass();\n      this.ref = undefined;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input } from '@angular/core';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ngx-tv-container',\n  templateUrl: './ngx-tv-container.component.html',\n  styleUrls: ['./ngx-tv-container.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NgxTvContainerComponent {\n  componentText?: string;\n  componentHide = true;\n\n  @Input() set text(value: string | null) {\n    if (value !== this.componentText) {\n      this.componentHide = !value;\n      this.componentText = value || '';\n      this.cdr.detectChanges();\n    }\n  }\n\n  constructor(private cdr: ChangeDetectorRef) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { TRANSLOCO_SCOPE, TranslocoModule } from '@ngneat/transloco';\nimport { NgxTvContainerDirective } from './ngx-tv-container.directive';\nimport { NgxTvContainerComponent } from './ngx-tv-container/ngx-tv-container.component';\nimport { NgxTvFormDirective } from './ngx-tv-form.directive';\nimport { NgxTvScopeDirective } from './ngx-tv-scope.directive';\nimport { NGX_TV_CONFIG, NgxTvConfig } from './ngx-tv.config';\nimport { NgxTvDirective } from './ngx-tv.directive';\n\nexport function getConfig(config?: Partial<NgxTvConfig>): NgxTvConfig {\n  return {\n    scope: 'validation',\n    submittedClass: 'ng-submitted',\n    errorsComponent: NgxTvContainerComponent,\n    invalidClass: undefined,\n    ...config,\n  };\n}\n\n@NgModule({\n  declarations: [\n    NgxTvDirective,\n    NgxTvFormDirective,\n    NgxTvContainerComponent,\n    NgxTvContainerDirective,\n    NgxTvScopeDirective,\n  ],\n  imports: [CommonModule, TranslocoModule],\n  exports: [NgxTvDirective, NgxTvFormDirective, NgxTvContainerComponent, NgxTvContainerDirective, NgxTvScopeDirective],\n})\nexport class NgxTvModule {\n  static forRoot(config?: NgxTvConfig): ModuleWithProviders<NgxTvModule> {\n    return {\n      ngModule: NgxTvModule,\n      providers: [\n        {\n          provide: NGX_TV_CONFIG,\n          useValue: getConfig(config),\n        },\n        { provide: TRANSLOCO_SCOPE, useValue: getConfig(config).scope },\n      ],\n    };\n  }\n\n  static forChild(): ModuleWithProviders<NgxTvModule> {\n    return {\n      ngModule: NgxTvModule,\n    };\n  }\n}\n"]}